---
- name: install os via iso mount
  hosts: "{{ targets }}"
  connection: local
  gather_facts: False
  vars:
    url_root: https://{{ inventory_hostname }}
    device_service: /api/DeviceService/Devices
    device_id_url: "({{ device_id }})"
    ome_user: admin
    ome_password: P@ssw0rd
    share1: 192.168.1.180:/share/
    share_user: administrator
    share_password: P@ssw0rd
    iso1: ISO_IMAGE_1823624133.iso

  collections:
    - dellemc.openmanage
    - ansible.builtin

  tasks:
    - name: capture device info
      uri:
        url: "{{ url_root }}{{ device_service }}"
        user: "{{ ome_user }}"
        password: "{{ ome_password }}"
        method: GET
        headers:
          content-type: application/json
        validate_certs: no
        status_code: 200
        return_content: no
      register: result
      vars:
      tags:
         - get_info

    - name: capture device id
      set_fact:
        device_id: "{{ result.json.value | json_query(jmesquery) }}"
      vars:
        jmesquery: "[? DeviceServiceTag == {{ tck }}{{ svc_tag }}{{ tck }}].{Id:Id}[0].Id"
        tck: "'"
      tags:
         - get_info

    - name: capture device idrac info
      uri:
        url: "{{ url_root }}{{ device_service }}{{ device_id_url }}"
        user: "{{ ome_user }}"
        password: "{{ ome_password }}"
        method: GET
        headers:
          content-type: application/json
        validate_certs: no
        status_code: 200
        return_content: no
      register: result
      vars:
      tags:
         - get_info

    - name: filter out ip address from idrac info
      set_fact:
        device_info: "{{ result | json_query(jmesquery) }}"
      vars:
        jmesquery: "json.{DeviceServiceTag: DeviceServiceTag, DeviceName: DeviceName, NetworkAddress: DeviceManagement[? ManagementProfile[0].AgentName == 'iDRAC'].NetworkAddress[] | [0]}"
      tags:
         - get_info

    - name: filter info down to idrac network address
      set_fact:
        NetworkAddress: "{{ device_info.NetworkAddress }}"
      tags:
         - get_info

    - name: delete job queue
      idrac_lifecycle_controller_jobs:
        idrac_ip:   "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"
        validate_certs: false
      register: result
      tags:
        - job_prep

    - name: reset idrac
      idrac_reset:
        idrac_ip:   "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"
        validate_certs: false
      tags:
        - job_prep

    - name: pause for reset
      pause:
        minutes: 1
      tags:
        - job_prep

    - name: check lifecycle controller status
      idrac_lifecycle_controller_status_info:
        idrac_ip:   "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"
        validate_certs: false
      register: result
      retries: 10
      delay: 60
      until: result is not failed and result.lc_status_info.LCStatus == "Ready"
      tags:
        - job_prep

    - name: boot to network iso
      idrac_os_deployment:
        idrac_ip: "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password: "{{ idrac_password }}"
        share_name: "{{ share1 }}"
        share_user: "{{ share_user }}"
        share_password: "{{ share_password }}"
        iso_image:  "{{ iso1 }}"
        expose_duration: 180
        validate_certs: false
      register: idrac_os_result
      tags: iso_boot

# example) ansible-playbook ome_os_install.yml -i inventory.yml -e "targets=ome svc_tag=6FTN9Z1"
# example) ansible-playbook ome_os_install.yml -i inventory.yml -t get_info,iso_boot -e "targets=ome svc_tag=6FTN9Z1"
# example) ansible-playbook ome_os_install.yml -i inventory.yml --skip-tags job_prep -e "targets=ome svc_tag=6FTN9Z1"
# /home/rob/playbooks/Mycode/ansible/dev/102722
...
