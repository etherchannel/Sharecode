---
- name: convert device id to ip address
  hosts: "{{ targets }}"
  connection: local
  gather_facts: False
  vars:
    url_root: https://{{ inventory_hostname }}
    device_service: /api/DeviceService/Devices
    device_id_url: "({{ device_id }})"
    catalog_name: "catalog2"

  collections: dellemc.openmanage

  tasks:
    - name: query ome for all devices info and register result
      uri:
        url: "{{ url_root }}{{ device_service }}"
        user: "{{ ome_user }}"
        password: "{{ ome_password }}"
        method: GET
        headers:
          content-type: application/json
        validate_certs: no
        status_code: 200
        return_content: no
      register: result
      vars:
      tags:
         - get_info

    - name: filter result down to device id
      ansible.builtin.set_fact:
        device_id: "{{ result.json.value | json_query(jmesquery) }}"
      vars:
        jmesquery: "[? DeviceServiceTag == {{ tck }}{{ svc_tag }}{{ tck }}].{Id:Id}[0].Id"
        tck: "'"
      tags:
         - set_fact

    - name: print device id
      ansible.builtin.debug:
        var: device_id
      tags:
          - debug

    - name: capture system idrac info
      uri:
        url: "{{ url_root }}{{ device_service }}{{ device_id_url }}"
        user: "{{ ome_user }}"
        password: "{{ ome_password }}"
        method: GET
        headers:
          content-type: application/json
        validate_certs: no
        status_code: 200
        return_content: no
      register: result
      vars:
      tags:
         - get_info

    - name: filter result
      ansible.builtin.set_fact:
        device_info: "{{ result | json_query(jmesquery) }}"
      vars:
        jmesquery: "json.{DeviceServiceTag: DeviceServiceTag, DeviceName: DeviceName, NetworkAddress: DeviceManagement[? ManagementProfile[0].AgentName == 'iDRAC'].NetworkAddress[] | [0]}"
      tags:
         - set-fact

    - name: print filtered result
      ansible.builtin.debug:
        var: device_info
      tags:
          - debug

    - name: filter info down to idrac nework address
      ansible.builtin.set_fact:
        NetworkAddress: "{{ device_info.NetworkAddress }}"
      tags:
         - set_fact

    - name: print idrac network address
      ansible.builtin.debug:
        var: NetworkAddress
      tags:
          - debug

    - name: delete job queue
      idrac_lifecycle_controller_jobs:
        idrac_ip:   "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"
        validate_certs: false
      register: result
      tags:
        - delete_jobs

    - name: print delete info
      ansible.builtin.debug:
        var: result
      tags:
        - debug

    - name: reset idrac
      idrac_reset:
        idrac_ip:   "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"
        validate_certs: false
      tags:
        - reset_idrac

    - name: pause for reset to kick off
      ansible.builtin.pause:
        minutes: 1
      tags:
        - pause

    - name: check lifecycle controller status
      idrac_lifecycle_controller_status_info:
        idrac_ip:   "{{ NetworkAddress }}"
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"
        validate_certs: false
      register: result
      retries: 10
      delay: 60
      until: result is not failed and result.lc_status_info.LCStatus == "Ready"
      tags:
        - lc_status

    - name: print device info
      ansible.builtin.debug:
        var: result
      tags:
        - debug

    - name: create baseline for selected tag
      ome_firmware_baseline:
        hostname:   "{{ inventory_hostname }}"
        username: "{{ ome_user }}"
        password:  "{{ ome_password }}"
        baseline_name: "Ansible_Named_{{ lookup('pipe', 'date +%Y/%m/%d_%H:%M:%S') }}"
        baseline_description: "Ansible_Described_{{ lookup('pipe', 'date +%Y_%m_%d_%H:%M:%S') }}"
        catalog_name: "{{ catalog_name }}"
        device_service_tags: "{{ svc_tag }}"
        validate_certs: false
      register: ome_baseline_out
      tags: create_baseline

    - ansible.builtin.debug:
        var: ome_baseline_out.baseline_status.Name
      tags: debug

    - name: verify firmware baseline compliance
      ome_firmware_baseline_compliance_info:
        hostname:   "{{ inventory_hostname }}"
        username: "{{ ome_user }}"
        password:  "{{ ome_password }}"
        baseline_name: "{{ ome_baseline_out.baseline_status.Name }}"
        validate_certs: false
      register: ome_compliance_out
      tags: baseline_compliance

    - ansible.builtin.debug:
        var: ome_compliance_out.baseline_compliance_info.0.ComplianceStatus
      tags: debug

    - name: capture compliance status of targets
      ansible.builtin.set_fact:
        status: "{{ ome_compliance_out.baseline_compliance_info.0.ComplianceStatus }}"
      tags: set_fact

    - name: enforce baseline compliance when status not "OK"
      ome_firmware:
        hostname:   "{{ inventory_hostname }}"
        username: "{{ ome_user }}"
        password:  "{{ ome_password }}"
        baseline_name: "{{ ome_baseline_out.baseline_status.Name }}"
        validate_certs: false
      when: status != "OK"
      register: ome_enforce_out
      tags: enforce_baseline

    - name: re-verify baseline compliance
      ome_firmware_baseline_compliance_info:
        hostname:   "{{ inventory_hostname }}"
        username: "{{ ome_user }}"
        password:  "{{ ome_password }}"
        baseline_name: "{{ ome_baseline_out.baseline_status.Name }}"
        validate_certs: false
      retries: 10
      delay: 60
      register: ome_compliance_out
      until: ome_compliance_out.baseline_compliance_info.0.ComplianceStatus == "OK"
      tags: get_info

    - name: delete baseline compliance
      ome_firmware_baseline:
        hostname:   "{{ inventory_hostname }}"
        username: "{{ ome_user }}"
        password:  "{{ ome_password }}"
        baseline_name: "{{ ome_baseline_out.baseline_status.Name }}"
        state: absent
        validate_certs: false
      register: ome_delete_out
      tags: delete_baseline

    - ansible.builtin.debug:
        var: ome_delete_out.msg
      tags: debug

# example) ansible-playbook ome_querybytag_deletequeue_resetidrac_createbaselineupdate.yml -i inventory.yml -e "targets=ome svc_tag=6FTN9Z1"
# example) ansible-playbook ome_querybytag_deletequeue_resetidrac_createbaselineupdate.yml -i inventory.yml -t get_info,set_fact,delete_jobs,rest_idrac,pause,lc_status -e "targets=ome svc_tag=6FTN9Z1"
# example) ansible-playbook ome_querybytag_deletequeue_resetidrac_createbaselineupdate.yml -i inventory.yml --skip-tags reset_idrac -e "targets=ome svc_tag=6FTN9Z1"
# example) /home/rob/playbooks/Mycode/ansible/dev/052722
...
